// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(theaterContext))]
    partial class theaterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Betaling", b =>
                {
                    b.Property<int>("factuurNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ownerid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("prijs")
                        .HasColumnType("INTEGER");

                    b.HasKey("factuurNr");

                    b.HasIndex("ownerid");

                    b.ToTable("Betaling");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("datum")
                        .HasColumnType("TEXT");

                    b.Property<int>("ownerid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("programmeringid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("ownerid");

                    b.HasIndex("programmeringid");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("EncryptionKey", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Key");
                });

            modelBuilder.Entity("Gebruiker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("leeftijdsGroep")
                        .HasColumnType("INTEGER");

                    b.Property<int>("level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("naam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Gebruiker");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Groep", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("afbeelding")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("naam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("omschrijving")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("websiteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Groep");
                });

            modelBuilder.Entity("Interesse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("datum")
                        .HasColumnType("TEXT");

                    b.Property<string>("omschrijving")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ownerid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("ownerid");

                    b.ToTable("Interesse");
                });

            modelBuilder.Entity("LoginGegevens", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("twoFactor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("user_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("wachtwoord")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("LoginGegeven");
                });

            modelBuilder.Entity("Logs", b =>
                {
                    b.Property<int>("lognr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("datum")
                        .HasColumnType("TEXT");

                    b.Property<int>("gebruikerid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("query")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("lognr");

                    b.HasIndex("gebruikerid");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Programmering", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("afbeelding")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("datum")
                        .HasColumnType("TEXT");

                    b.Property<string>("omschrijving")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("titel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("zaalNr")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("zaalNr");

                    b.ToTable("Programmering");
                });

            modelBuilder.Entity("Reservering", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("aankoopDatum")
                        .HasColumnType("TEXT");

                    b.Property<bool>("betaald")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ownerid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("programmeringid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("stoelen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("zaalNr")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("ownerid");

                    b.HasIndex("programmeringid");

                    b.HasIndex("zaalNr");

                    b.ToTable("Reservering");
                });

            modelBuilder.Entity("Zaal", b =>
                {
                    b.Property<int>("zaalNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("derderangsAantal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("eersterangsAantal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("soort")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("tweederangsAantal")
                        .HasColumnType("INTEGER");

                    b.HasKey("zaalNr");

                    b.ToTable("Zaal");
                });

            modelBuilder.Entity("betrokkene-groepen", b =>
                {
                    b.Property<int>("betrokkenenid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("groepenid")
                        .HasColumnType("INTEGER");

                    b.HasKey("betrokkenenid", "groepenid");

                    b.HasIndex("groepenid");

                    b.ToTable("betrokkene-groepen");
                });

            modelBuilder.Entity("betrokkene-programmering", b =>
                {
                    b.Property<int>("betrokkenenid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("programmeringenid")
                        .HasColumnType("INTEGER");

                    b.HasKey("betrokkenenid", "programmeringenid");

                    b.HasIndex("programmeringenid");

                    b.ToTable("betrokkene-programmering");
                });

            modelBuilder.Entity("groep-programmering", b =>
                {
                    b.Property<int>("groepenid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("programmeringenid")
                        .HasColumnType("INTEGER");

                    b.HasKey("groepenid", "programmeringenid");

                    b.HasIndex("programmeringenid");

                    b.ToTable("groep-programmering");
                });

            modelBuilder.Entity("Bestelling", b =>
                {
                    b.HasBaseType("Betaling");

                    b.Property<int>("korting")
                        .HasColumnType("INTEGER");

                    b.Property<int>("reserveringFK")
                        .HasColumnType("INTEGER");

                    b.HasIndex("reserveringFK")
                        .IsUnique();

                    b.ToTable("Bestelling", (string)null);
                });

            modelBuilder.Entity("Donatie", b =>
                {
                    b.HasBaseType("Betaling");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Donatie", (string)null);
                });

            modelBuilder.Entity("Betrokkene", b =>
                {
                    b.HasBaseType("Gebruiker");

                    b.Property<string>("afbeelding")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("omschrijving")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.ToTable("Betrokkene", (string)null);
                });

            modelBuilder.Entity("Betaling", b =>
                {
                    b.HasOne("Gebruiker", "owner")
                        .WithMany("betalingen")
                        .HasForeignKey("ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.HasOne("Gebruiker", "owner")
                        .WithMany("comments")
                        .HasForeignKey("ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Programmering", "programmering")
                        .WithMany("comments")
                        .HasForeignKey("programmeringid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");

                    b.Navigation("programmering");
                });

            modelBuilder.Entity("Interesse", b =>
                {
                    b.HasOne("Gebruiker", "owner")
                        .WithMany("interesses")
                        .HasForeignKey("ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");
                });

            modelBuilder.Entity("LoginGegevens", b =>
                {
                    b.HasOne("Gebruiker", "user")
                        .WithOne("loginGegevens")
                        .HasForeignKey("LoginGegevens", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Logs", b =>
                {
                    b.HasOne("Gebruiker", "gebruiker")
                        .WithMany("logs")
                        .HasForeignKey("gebruikerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("gebruiker");
                });

            modelBuilder.Entity("Programmering", b =>
                {
                    b.HasOne("Zaal", "zaal")
                        .WithMany("programmeringen")
                        .HasForeignKey("zaalNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("zaal");
                });

            modelBuilder.Entity("Reservering", b =>
                {
                    b.HasOne("Gebruiker", "owner")
                        .WithMany("reserveringen")
                        .HasForeignKey("ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Programmering", "programmering")
                        .WithMany("reserveringen")
                        .HasForeignKey("programmeringid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zaal", "zaal")
                        .WithMany("reserveringen")
                        .HasForeignKey("zaalNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");

                    b.Navigation("programmering");

                    b.Navigation("zaal");
                });

            modelBuilder.Entity("betrokkene-groepen", b =>
                {
                    b.HasOne("Betrokkene", null)
                        .WithMany()
                        .HasForeignKey("betrokkenenid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Groep", null)
                        .WithMany()
                        .HasForeignKey("groepenid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("betrokkene-programmering", b =>
                {
                    b.HasOne("Betrokkene", null)
                        .WithMany()
                        .HasForeignKey("betrokkenenid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Programmering", null)
                        .WithMany()
                        .HasForeignKey("programmeringenid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("groep-programmering", b =>
                {
                    b.HasOne("Groep", null)
                        .WithMany()
                        .HasForeignKey("groepenid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Programmering", null)
                        .WithMany()
                        .HasForeignKey("programmeringenid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bestelling", b =>
                {
                    b.HasOne("Betaling", null)
                        .WithOne()
                        .HasForeignKey("Bestelling", "factuurNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservering", "reservering")
                        .WithOne("bestelling")
                        .HasForeignKey("Bestelling", "reserveringFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reservering");
                });

            modelBuilder.Entity("Donatie", b =>
                {
                    b.HasOne("Betaling", null)
                        .WithOne()
                        .HasForeignKey("Donatie", "factuurNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Betrokkene", b =>
                {
                    b.HasOne("Gebruiker", null)
                        .WithOne()
                        .HasForeignKey("Betrokkene", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gebruiker", b =>
                {
                    b.Navigation("betalingen");

                    b.Navigation("comments");

                    b.Navigation("interesses");

                    b.Navigation("loginGegevens")
                        .IsRequired();

                    b.Navigation("logs");

                    b.Navigation("reserveringen");
                });

            modelBuilder.Entity("Programmering", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("reserveringen");
                });

            modelBuilder.Entity("Reservering", b =>
                {
                    b.Navigation("bestelling")
                        .IsRequired();
                });

            modelBuilder.Entity("Zaal", b =>
                {
                    b.Navigation("programmeringen");

                    b.Navigation("reserveringen");
                });
#pragma warning restore 612, 618
        }
    }
}
